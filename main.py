import pygame as pg
import sys
import board as b
import cpu as c

SQUARE_SIZE = 80
WINDOW_SIZE = (640, 640)
WINDOW_TITLE = "Chess"
PIECE_IMAGES = {
    'P': 'white_pieces/white_pawn.png',
    'N': 'white_pieces/white_knight.png',
    'B': 'white_pieces/white_bishop.png',
    'R': 'white_pieces/white_rook.png',
    'Q': 'white_pieces/white_queen.png',
    'K': 'white_pieces/white_king.png',
    'p': 'black_pieces/black_pawn.png',
    'n': 'black_pieces/black_knight.png',
    'r': 'black_pieces/black_rook.png',
    'q': 'black_pieces/black_queen.png',
    'k': 'black_pieces/black_king.png',
    'b': 'black_pieces/black_bishop.png',
}
BLACK_PIECES = {'p', 'n', 'r', 'q', 'k', 'b'}
WHITE_PIECES = {'P', 'N', 'B', 'R', 'Q', 'K'}

class Chess:
    def __init__(self):
        """
        ##################
        IMPORTANT!!!!
        ##################
        We could have stuff like difficulty, mode and other options that we can feed into this constructor
        That way we can initialize different Chess games based on user input
        """

    def p_vs_cpu(self):
        """
        Purpose:
            - Initialize chess game
        """
        # Initialize Pygame
        pg.init()
        screen = pg.display.set_mode(WINDOW_SIZE)
        pg.display.set_caption(WINDOW_TITLE)

        board_obj = b.Board()
        board = board_obj.board
        cpu = c.CPU()

        # Set the size of each square on the board
        select_piece = player_move = None
        player_turn = True
        possible_moves = None
        passant = None
        
        # Game loop
        while True:
            if True:
                for event in pg.event.get():
                    row, col = pg.mouse.get_pos()[1] // SQUARE_SIZE, pg.mouse.get_pos()[0] // SQUARE_SIZE
                    obj = board[row][col]
                    if event.type == pg.MOUSEBUTTONDOWN:
                        print(passant)
                        if obj and obj.symbol: #in WHITE_PIECES: # check if piece is white
                            select_piece = obj
                            possible_moves = select_piece.get_possible(board, passant)
                        elif select_piece and (row, col) in possible_moves: # this condition is if we select an empty square or black piece
                            player_move, passant = select_piece.move(board, row, col)
                            possible_moves = select_piece = None
                            player_turn = False
                    self.check_quit(event, sys)
            else:
                move = self.translate_from(cpu.computer_move(player_move)) 
                board[move[0][0]][move[0][1]].move(board, *move[1], passant)
                player_turn = True ## MAKE INTO COUNTER TO STORE NUMBER OF MOVES PLAYED??

            board_obj.draw_board(screen, select_piece, possible_moves)
            pg.display.flip()

    def translate_from(self, str):
        """
        Parameters:
            - str: In the format "d2d4" which represents coordinate from which a piece is from to where its moving in chessboard coords
        Purpose:
            - Return a tuple that gives ((row, col), (row, col)) in terms of row col the piece comes from and is going to
        """
        map_letter = {letter: ix for ix, letter in enumerate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])}
        return ((8-int(str[1]), map_letter[str[0]]), (8-int(str[3]), map_letter[str[2]]))
    
    def check_quit(self, event, sys):
        """
        Parameters:
            - event: Event object generated by Pygame (action performed by user(mouseclick, mouse movement, button, etc..))
            - sys: Sys object which controls script
        Purpose:
            - Check the event type for quit and exit the program
        """
        if event.type == pg.QUIT:
                pg.quit()
                sys.exit()
        elif event.type == pg.KEYDOWN:
            if event.key == pg.K_ESCAPE:
                pg.quit()
                sys.exit()

if __name__ == "__main__": 
    Chess().p_vs_cpu()
